// Athletes vary a lot in how <b>strong</b> they are overall. Some athletes are very strong, most are average, and some are weak. This doesn't change throughout the course of the day. 
<BEGIN_CODE>
var intrinsic_strength = mem(function ({athlete}) {
      var parameter_weak_prior = 0.33;
      var parameter_average_prior = 0.33;
      var parameter_strong_prior = 0.34;

      var weak_mean = 80; 
      var average_mean = 100;
      var strong_mean = 140;
      var parameter_intrinsic_strength_variance = 10;

      var parameter_intrinsic_strength_average = categorical({ps: [parameter_weak_prior, parameter_average_prior, parameter_strong_prior], 
      vs: [weak_mean, average_mean, strong_mean]});

      return Math.max(gaussian(parameter_intrinsic_strength_average ,  parameter_intrinsic_strength_variance), 0);
    })
<END_CODE>

// One part of this sport involves skiing. Stronger athletes can ski faster than weaker athletes.
<BEGIN_CODE>
var athlete_speed_at_skiing_in_round = mem(function({athlete, round}) {
      return intrinsic_strength({athlete : athlete});
    })
<END_CODE>

// Another part of this sport involves shooting. Athletes also vary a lot in how <b>accurate at shooting a rifle</b> they tend to be in any given round. Stronger and more experienced athletes also tend to be more accurate than weaker and less experienced athletes.
<BEGIN_CODE>
var athlete_shooting_accuracy_in_round = mem(function({athlete, round}) {
     var parameter_low_accuracy_prior = 
          intrinsic_strength(athlete) > 120 ? 0.05 : 
               intrinsic_strength(athlete) < 80 ?  0.8 : 
                                                     0.2;  
      var parameter_moderate_accuracy_prior = intrinsic_strength(athlete) > 120 ? 0.15 : 
               intrinsic_strength(athlete) < 80 ?  0.15 : 
                                                        0.6; 
      var parameter_extra_high_accuracy_prior = intrinsic_strength(athlete) > 120 ? 0.8 :  
               intrinsic_strength(athlete) < 80 ?  0.05 : 
                                                        0.2; 

      var low_accuracy_average = 30; 
      var moderate_accuracy_average = 60;
      var extra_high_accuracy_average = 90;
      var accuracy_variance = 10;
      
      var this_player_accuracy_average = categorical({ps: [parameter_low_accuracy_prior, parameter_moderate_accuracy_prior, parameter_extra_high_accuracy_prior], 
      vs: [low_accuracy_average, moderate_accuracy_average, extra_high_accuracy_average]});

      return Math.min(Math.max(gaussian(this_player_accuracy_average, accuracy_variance), 0), 100)
    })
<END_CODE>

// In each round, teams of athletes compete in a skiing race, followed by a target shooting round. Athletes receive a score for how fast they ski, and how accurate they are at shooting in that round. The team's <b>overall score</b> in each round is determined by total scores of the athletes on the team.
<BEGIN_CODE>
var team_overall_score_in_round = function({team, round}) {
    var total_team_sum_of_scores = sum(map(function(athlete) { 
        return athlete_speed_at_skiing_in_round({athlete: athlete, round: round}) + athlete_shooting_accuracy_in_round({athlete: athlete, round: round})
        }, team));
    return total_team_sum_of_scores;
}
<END_CODE>

// The team that completes the biathlon round with the highest score <b>beats</b> the other team.
<BEGIN_CODE>
var beat = function({team1, team2, round}){
      return team_overall_score_in_round({team: team1, round: round}) > team_overall_score_in_round({team: team2, round: round})
}
<END_CODE>

// The team that completes the biathlon round with the lowest score <b>loses</b> to the other team.
<BEGIN_CODE>
var lost = function({team1, team2, round}){ 
      return !beat({team1: team1, team2: team2, round: round})
}
<END_CODE>

// When we ask you about an athlete's <b>overall strength ranking</b>, you should imagine a set of random other walk-ons -- how many would this athlete be <b>stronger</b> than?
<BEGIN_CODE>
var intrinsic_strength_rank = function({athlete, out_of_n_athletes}) {
        var random_athlete_ids = mapN(function(x) {return uniform(0, 100)}, out_of_n_athletes - 1)
        
        return sum(map(
            function(random_athlete_id) {
              return intrinsic_strength({athlete: athlete}) > intrinsic_strength({athlete: random_athlete_id})}, random_athlete_ids))
    }
<END_CODE>

// Finally, when we ask you to imagine a new biathlon round later this same day, you should imagine the two teams competing against each other and tell us which one you think is <b>more likely to win</b>.
<BEGIN_CODE>
var who_would_win_by_how_much = function({team1, team2, round}) {
      var num_future_rounds_to_simulate = 5;
      var random_future_round_ids = mapN(function(x) {return uniform(round+1, 20)}, num_future_rounds_to_simulate);

      var simulated_rounds_won_by_team_2 = sum(map(
            function(random_future_round_id) {
              return lost({team1: team1, team2: team2, round: random_future_round_id})}, random_future_round_ids))

      return simulated_rounds_won_by_team_2 / num_future_rounds_to_simulate;
}
<END_CODE>



