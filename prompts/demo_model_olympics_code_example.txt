This is a code generation task. Your job is to write simple probabilsitic programs in the WebPPL programming language. Please delimit any new functions or expressions with two newline characters.

Here are the library functions you can always use.
// LIBRARY_FUNCTIONS
var argMax = function(f, ar){
    return maxWith(f, ar)[0]
};

var mapMaxOverArray = function(f, ar){ 
    return maxWith(f, ar)[1]
}

var argMin = function(f, ar){
    return minWith(f, ar)[0]
};

var mapMinOverArray = function(f, ar){ 
    return minWith(f, ar)[1]
}

var mean = function(ar){ 
    return sum(ar) / ar.length
}

Here is an example WebPPL probabilistic program, which encodes a simple model for athletes playing canoe races.
<START_COMMENTED_WEBPPL_CODE>
var model = function() {
    // BACKGROUND KNOWLEDGE
    // Intrinsic strength is an underlying attribute of a given athlete that varies somewhat widely from athlete to athlete.
    var intrinsic_strength = mem(function ({athlete}) {
      var parameter_intrinsic_strength_average = 100;
      var parameter_intrinsic_strength_variance = 20;
      return Math.max(gaussian(parameter_intrinsic_strength_average, parameter_intrinsic_strength_variance), 0)
    })

    // An athlete's intrinsic strength ranking out of n other athletes is the number of other athletes we might expect them to be stronger than out of N total random athletes.
    var intrinsic_strength_rank = function({athlete, out_of_n_athletes}) {
        var random_athlete_ids = mapN(function(x) {return uniform(0, 1000)}, out_of_n_athletes - 1)
        return sum(map(
            function(random_athlete_id) {
              return intrinsic_strength({athlete: athlete}) > intrinsic_strength({athlete: random_athlete_id})}, random_athlete_ids))
    }

    // Athletes also vary in the effort that they put into any given race. Athletes can put in either moderate amount of effort, little effort, or extra high amounts of effort. Which of these they are more likely to do probably depends on their underlying strength, as stronger athletes are probably more likely to put in extra high effort, and weaker athletes probably tend to be more likely to put in lower amounts of effort.
    var effort_level_in_race = mem(function({athlete, race}) {

      var parameter_low_effort_prior = 
          intrinsic_strength(athlete) > 140 ? 0.05 : // Strong athletes rarely put in little effort 
               intrinsic_strength(athlete) < 90 ?  0.8 : // Weak athletes often put in little effort
                                                     0.2;  // Otherwise generally don't put in little effort
      var parameter_moderate_effort_prior = intrinsic_strength(athlete) > 140 ? 0.15 : // Strong athletes also don't generally put in moderate effort
               intrinsic_strength(athlete) < 90 ?  0.15 : // Weak athletes also don't often put in moderate effort
                                                        0.6; // Medium athletes often do put in moderate effort
      var parameter_extra_high_effort_prior = intrinsic_strength(athlete) > 140 ? 0.8 :  // Strong athletes often put in a lot of effort
               intrinsic_strength(athlete) < 90 ?  0.05 : // Weak athletes rarely put in extra high effort
                                                        0.2; // Otherwise generally don't put in extra high effort

      // How much someone pulls on average if they are pulling with low, moderately high, or extra high effort.
      var low_effort_average = 40; 
      var moderate_effort_average = 60;
      var extra_high_effort_average = 80;
      var effort_variance = 10;
      
     
      var effort_average = categorical({ps: [parameter_low_effort_prior, parameter_moderate_effort_prior, parameter_extra_high_effort_prior], 
      vs: [low_effort_average, moderate_effort_average, extra_high_effort_average]});

      return Math.min(Math.max(gaussian(effort_average, effort_variance), 0), 100)
    })

    // An athlete's effective rowing speed in a given race is determined at a base level by their intrinsic strength, since stronger athletes row faster. However, we need to carefully take into account all of the factors described. Their effective speed in a given race is affected by their effort level, which is effectively a percentage multiplier on their speed in this race. 
    var effective_rowing_speed_in_race = mem(function({athlete, race}) {
      var base_rowing_speed_in_race = intrinsic_strength({athlete : athlete})

      var average_effort = 50;

      var rowing_speed_adjusted_for_effort_level_in_this_race = (effort_level_in_race({athlete: athlete, race: race}) / average_effort) * base_rowing_speed_in_race;

      return rowing_speed_adjusted_for_effort_level_in_this_race;
    })
    
    // A team's rowing speed in a race is described in the background as the AVERAGE effective speed with which the athletes are able to row on that team.
    var team_rowing_speed_in_race = function({team, race}) {
      return mean(map(function(athlete) { return effective_rowing_speed_in_race({athlete: athlete, race: race}) }, team))
    }
    
    // A canoe team beats another if their team's rowing speed is faster in that race, assuming a fixed race length.
    var beat = function({team1, team2, race}){
      // Assert that the appropriate team wins
      // Return true if team1 won
      return team_rowing_speed_in_race({team: team1, race: race}) > team_rowing_speed_in_race ({team: team2, race: race})
    }
    
    // A canoe team loses to another team if they did not beat that team in a given race.
    var lost = function({team1, team2, race}){ 
      return !beat({team1: team1, team2: team2, race: race})
    }

    // To calculate who would win and by how much, we will calculate the likelihood that a team would win over another. 
    var who_would_win_by_how_much = function({team1, team2, race}) {
      // 0% is Team 1 would defintiely win, 100% is Team 2 would definitely win, so we will just calculate the likelihood that team 2 would win here.
      // Simulate random possible future races based on random race IDs, starting with the ID of the current race to avoid any races we've seen so far. We'll simulate out of 100 random races.
      var num_future_races_to_simulate = 100;
      var random_future_race_ids = mapN(function(x) {return uniform(race+1, 1000)}, num_future_races_to_simulate);

      // Calculate how many races that team 2 would have won, meaning that team 1 lost.
      var simulated_races_won_by_team_2 = sum(map(
            function(random_future_race_id) {
              return lost({team1: team1, team2: team2, race: random_future_race_id})}, random_future_race_ids))

      // Return the likelihood that team 2 won.
      return simulated_races_won_by_team_2 / num_future_races_to_simulate;
    }
    
    // CONDITIONS
    // In the first race, Alice beat Casey.
    condition(beat({team1: ['alice'], team2: ['casey'], race: 1}))
    // In the second race, Alice and Ness beat Casey and Max.
    condition(beat({team1: ['alice', 'ness'], team2: ['casey', 'max'], race: 2}))
    // In the third race, Max and Alice lost to Casey and Ness.
    condition(lost({team1: ['max', 'alice'], team2: ['casey', 'ness'], race: 3}))
    
    // QUERIES
    // Query 1: Out of 100 random athletes, where do you think Alice ranks in terms of intrinsic strength?
    // Query 2: On a percentage scale from 0 to 100%, how much effort do you think Max put into the third race?
    // Query 3: n a new race later this same day between Alice and Ness (Team 1) and Max and Taylor (Team 2), who would win and by how much?
    // Query 4: In a new race later this same day between Max and Casey (Team 1) and Ness and Willow (Team 2), who would win and by how much?
    return {
        query1: intrinsic_strength_rank({athlete: 'alice', out_of_n_athletes: 100})
        query2: effort_level_in_race({athlete: 'max', race: 3}),
        query3: who_would_win_by_how_much({team1: ['alice', 'ness'], team2: ['max', 'taylor'], race: 4}),
        query4: who_would_win_by_how_much({team1: ['max', 'casey'], team2: ['ness', 'willow'], race: 5})
    }

}
// Now we run the model and collect an estimate.
var posterior = Infer({model: model, method: "MCMC", samples: 10000});
viz(posterior);
<END_COMMENTED_WEBPPL_CODE>

Here is another example WebPPL probabilistic program, which encodes a simple model for athletes taking part in biathlon rounds.
<START_COMMENTED_WEBPPL_CODE>
var model = function() {
    // BACKGROUND KNOWLEDGE
    // Intrinsic strength is an underlying attribute of a given athlete that varies somewhat widely from athlete to athlete, but on average people can probably exert about 1200 Newtons of force with their legs with a wide variance around that.
    var intrinsic_strength = mem(function ({athlete}) {
      var parameter_intrinsic_strength_average = 1200;
      var parameter_intrinsic_strength_variance = 50;
      return Math.max(gaussian(parameter_intrinsic_strength_average, parameter_intrinsic_strength_variance), 0)
    })

    // An athlete's intrinsic strength ranking out of n other athletes is the number of other athletes we might expect them to be stronger than out of N total random athletes.
    var intrinsic_strength_rank = function({athlete, out_of_n_athletes}) {
        // Generate out_of_n_athletes - 1 other random athlete IDs
        var random_athlete_ids = mapN(function(x) {return uniform(0, 1000)}, out_of_n_athletes - 1)
        
        // Total number of random other athletes this athlete is stronger than.
        return sum(map(
            function(random_athlete_id) {
              return intrinsic_strength({athlete: athlete}) > intrinsic_strength({athlete: random_athlete_id})}, random_athlete_ids))
    }

    // An athlete's shooting accuracy is a continuous parameter. We'll just model this as Gaussian distributed, with 80 (fairly accurate) being the average but a wide variance around that.
    var accuracy_at_shooting_in_round = mem(function({athlete, round}) {
       var parameter_accuracy_at_shooting_in_round_average = 80;
       var parameter_accuracy_at_shooting_in_round_variance = 25;
       return Math.min(Math.max(gaussian(parameter_accuracy_at_shooting_in_round_average, parameter_accuracy_at_shooting_in_round_variance), 0), 100)
    })

    // An athlete's effective speed in a given round is determined at a base level by their intrinsic strength, since stronger athletes can ski more quickly. However, we need to carefully take into account all of the factors described. In addition to their base speed, they will take more time proportional to their accuracy at shooting in that round, because they will take longer to successfully shoot the 10 targets. We'll model this at a coarse level by using their shooting accuracy to give a time penalty on their performance.
    var effective_speed_in_round = mem(function({athlete, round}) {
      // Assume that base_skiing_speed_in_round is some constant but noisy transformation of their underlying strength. We don't know the distance of the course, so we won't include that as a constant.
      var base_skiing_speed_in_round = gaussian(1, 0.1) * intrinsic_strength({athlete : athlete})

      // Add a time penalty based on how inaccurate (1 - accuracy_at_shooting_in_round) they are.
      var parameter_penalty_per_shot = 500; 
      var skiing_speed_in_round_adjusted_for_shooting_accuracy = base_skiing_speed_in_round - ((1 - accuracy_at_shooting_in_round({athlete: athlete, round: round}) / 100) * parameter_penalty_per_shot);

      return skiing_speed_in_round_adjusted_for_shooting_accuracy;
    })
    
    // A team's biathalon speed in a round is the average effective speed of all of its athletes in that round.
    var team_speed_in_round = function({team, round}) {
      return mean(map(function(athlete) { return effective_speed_in_round({athlete: athlete, round: round}) }, team))
    }

    // The amount that one team wins over another team is given by the difference in their biathalon speeds. 
    var who_would_win_by_how_much = function({team1, team2, round}) {
      // Positive (right hand) if team 2 would win; negative (left hand) if team 1 would win
      return team_speed_in_round({team: team2, round: round}) - team_speed_in_round({team: team1, round: round})
    }
    
    // A biathalon team beats another if their team's speed is faster in that round, assuming a fixed round length.
    var beat = function({team1, team2, round}){
      // Assert that the appropriate team wins
      // Return true if team1 won
      return team_speed_in_round({team: team1, round: round}) > team_speed_in_round({team: team2, round: round})
    }
    
    // A biathalon team loses to another team if they did not beat that team in a given round.
    var lost = function({team1, team2, round}){ 
      return !beat({team1: team1, team2: team2, round: round})
    }
    
    // CONDITIONS
    // In the first round, Billy and Emery beat Alice and Sam.
    condition(beat({team1: ['billy', 'emery'], team2: ['alice', 'sam'], round: 1}))


    // In the second round, Billy and Drew beat Alice and Lou.
    condition(beat({team1: ['billy', 'drew'], team2: ['alice', 'lou'], round: 2}))


    // In the third round, Billy and Ness beat Alice and Casey.
    condition(beat({team1: ['billy', 'ness'], team2: ['alice', 'casey'], round: 3}))
    // In the fourth round, Billy and Emery lost to Alice and Sam.
    condition(lost({team1: ['billy', 'emery'], team2: ['alice', 'sam'], round: 4}))
    
    // QUERIES
    // Query 1: Out of 100 random athletes, where do you think Billy ranks in terms of intrinsic strength?
    // Query 2: Out of 100 random athletes, where do you think Emery ranks in terms of intrinsic strength?
    // Query 3: Out of 100 random athletes, where do you think Alice ranks in terms of intrinsic strength?
    // Query 4: On a percentage scale from 0 to 100%, how accurate do you think Billy was at shooting in the fourth round?
    // Query 5: On a percentage scale from 0 to 100%, how accurate do you think Emery was at shooting in the fourth round?
    // Query 6: On a percentage scale from 0 to 100%, how accurate do you think Alice was at shooting in the fourth round?
    // Query 7: In a new round later this same day between Billy and Emery (Team 1) and Drew and Casey (Team 2), who would win and by how much?
    // Query 8: In a new round later this same day between Billy and Alice (Team 1) and Emery and Sam (Team 2), who would win and by how much?
    return {
        query1: intrinsic_strength_rank({athlete: 'billy', out_of_n_athletes: 100}),
        query2: intrinsic_strength_rank({athlete: 'emery', out_of_n_athletes: 100}),
        query3: intrinsic_strength_rank({athlete: 'alice', out_of_n_athletes: 100}),
        query4: accuracy_at_shooting_in_round({athlete: 'billy', round: 4}),
        query5: accuracy_at_shooting_in_round({athlete: 'emery', round: 4}),
        query6: accuracy_at_shooting_in_round({athlete: 'alice', round: 4}),
        query7: who_would_win_by_how_much({team1: ['billy', 'emery'], team2: ['drew', 'casey'], round: 5}),
        query8: who_would_win_by_how_much({team1: ['billy', 'alice'], team2: ['emery', 'sam'], round: 6})
    }

}
// Now we run the model and collect an estimate.
var posterior = Infer({model: model, method: "MCMC", samples: 10000});
viz(posterior);
<END_COMMENTED_WEBPPL_CODE>

Given those examples, please try to continue the following WebPPL model. You should directly continue the model in line. Please Generate only the next expression of the comment that is there and then stop by generating <END_CODE>.
<START_COMMENTED_WEBPPL_CODE>
var model = function() {
    // Intrinsic strength is an underlying attribute of a given athlete that varies somewhat widely from athlete to athlete, but on average people can probably exert about 400 Newtons of pulling force since they pull with both hands.
    var intrinsic_strength = mem(function ({athlete}) {
      var parameter_intrinsic_strength_average = 400;
      var parameter_intrinsic_strength_variance = 45;
      return Math.max(gaussian(parameter_intrinsic_strength_average, parameter_intrinsic_strength_variance), 0)
    })

    // An athlete's intrinsic strength ranking out of n other athletes is the number of other athletes we might expect them to be stronger than out of N total random athletes.
    var intrinsic_strength_rank = function({athlete, out_of_n_athletes}) {
        // Generate out_of_n_athletes - 1 other random athlete IDs
        var random_athlete_ids = mapN(function(x) {return uniform(0, 1000)}, out_of_n_athletes - 1)
        
        // Total number of random other athletes this athlete is stronger than.
        return sum(map(
            function(random_athlete_id) {
              return intrinsic_strength({athlete: athlete}) > intrinsic_strength({athlete: random_athlete_id})}, random_athlete_ids))
    }

    // The amount of effort that an athlete puts into any given match is a continuous parameter. We'll think of it as a 0-100% scale, where 0 is no effort at all, and 100% is maximum effort. In general, we might think that athletes put in either a moderate amount of effort, but sometimes will put in low effort and pull with only a fraction of their strength, and other times, put in close to maximum effort, pulling beyond what their intrinsic strength would suggest. Effort is match dependent and can change randomly among athletes and matches. In general, we might imagine that these are pretty much Gaussian distributed, with people putting in about the center of this range or a little less on average.
    var effort_level_in_match = mem(function({athlete, match}) {
      // Prior that an athlete is low, moderately high, or extra high effort on a given round.
      var parameter_low_effort_prior = 0.1;
      var parameter_moderate_effort_prior = 0.8;
      var parameter_extra_high_effort_prior = 0.1;

      // How much someone pulls on average if they are pulling with low, moderately high, or extra high effort.
      var low_effort_average = 45; 
      var moderate_effort_average = 50;
      var extra_high_effort_average = 70;
      var effort_variance = 10;

      var effort_average = categorical({ps: [parameter_low_effort_prior, parameter_moderate_effort_prior, parameter_extra_high_effort_prior], 
      vs: [low_effort_average, moderate_effort_average, extra_high_effort_average]});

      return Math.min(Math.max(gaussian(effort_average, effort_variance), 0), 100)
    })

    // The effective strength with which any given athlete pulls in a particular match is determined at a base level around their intrinsic strength -- in general how hard an athlete pulls in a given match is some noisy transformation of their underlying strength. However, this is modulated by how much effort they put into the match. If they put in average effort they will pull with about their intrinsic strength; if they put in low effort they will pull with less than their intrinsic strength would suggest, and if they put in high effort then they will pull more than their intrinsic strength would otherwise suggest.
    var effective_strength_in_match = mem(function({athlete, match}) {
      var base_pulling_strength_in_match =  intrinsic_strength({athlete : athlete});

      var average_effort = 50;
      // For now, we'll just think of effort as a multiplier on top of the base amount that one pulls.
      var strength_modulated_for_effort_level = (effort_level_in_match({athlete: athlete, match: match}) / average_effort) * base_pulling_strength_in_match;

      return strength_modulated_for_effort_level;
    })
    
    // The total amount that a team pulls in a given match is the described in the background as how hard the athletes COLLECTIVELY pull, or the total sum of combined effective strengths of all the athletes on that team in a match.
    var total_pulling_strength_for_team = function({team, match}) {
      // Each athlete contributes some amount of pulling
      // Because team includes a list of athletes, we need to map over them
      // Use a sum for collectively pull or combined effective strength
      return sum(map(function(athlete) { return effective_strength_in_match({athlete: athlete, match: match}) }, team))
    }
    
    // A team beats another if their team's total pulling strength is greater than the other team.
    var beat = function({team1, team2, match}){
      // Assert that the appropriate team wins
      // Return true if team1 won
      return total_pulling_strength_for_team({team: team1, match: match}) > total_pulling_strength_for_team({team: team2, match: match})
    }

    // A team loses if their team did not beat the other team in a given match.
    var lost = function({team1, team2, match}){ 
      return !beat({team1: team1, team2: team2, match: match})
    }

    // To calculate who would win and by how much, we will calculate the likelihood that a team would win over another. 
    var who_would_win_by_how_much = function({team1, team2, match}) {
      // 0% is Team 1 would defintiely win, 100% is Team 2 would definitely win, so we will just calculate the likelihood that team 2 would win here.
      // Simulate random possible future matches based on random match IDs, starting with the ID of the current match to avoid any matches we've seen so far. We'll simulate out of 100 random matches.
      var num_future_matches_to_simulate = 7;
      var random_future_match_ids = mapN(function(x) {return uniform(match+1, 1000)}, num_future_matches_to_simulate);

      // Calculate how many matches that team 2 would have won, meaning that team 1 lost.
      var simulated_matches_won_by_team_2 = sum(map(
            function(random_future_match_id) {
              return lost({team1: team1, team2: team2, match: random_future_match_id})}, random_future_match_ids))

      // Return the likelihood that team 2 won.
      return simulated_matches_won_by_team_2 / num_future_matches_to_simulate;
    }
    
    // CONDITIONS
    // In the first match, Bob and Mary beat Tom and Sue.
